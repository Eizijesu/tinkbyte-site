---
import ThemeToggle from './ThemeToggle.astro';
import Logo from './Logo.astro';

const navItems = [
  { text: 'Home', href: '/' },
  { text: 'Features', href: '/features' },
  { text: 'Audio', href: '/audio' },
  { text: 'Community', href: '/community' },
  { text: 'About', href: '/about' },
  { text: 'RSS', href: '/rss.xml' },
];

// Get current path for active link highlighting
const pathname = new URL(Astro.request.url).pathname;
const currentPath = pathname.slice(1); // remove the first "/"
---

<header
  class="fixed left-0 right-0 top-0 z-40 border-b border-zinc-100 bg-white/95 py-4 backdrop-blur-sm transition-all duration-300 dark:border-zinc-800 dark:bg-zinc-900/95"
>
  <div class="mx-auto flex max-w-4xl items-center justify-between px-4">
    <!-- TinkByte Logo -->
    <Logo size="default" showText={true} />

    <!-- Desktop Navigation -->
    <nav class="hidden items-center space-x-6 md:flex">
      {
        navItems.map((item) => {
          const isActive = currentPath === (item.href === '/' ? '' : item.href.slice(1));
          return (
            <a
              href={item.href}
              class={`font-space-grotesk group relative text-sm font-medium transition-all duration-200 ${
                isActive
                  ? 'text-zinc-900 dark:text-zinc-100'
                  : 'text-zinc-600 hover:text-zinc-900 dark:text-zinc-400 dark:hover:text-zinc-100'
              }`}
            >
              {item.text}
              {/* Active indicator */}
              {isActive && (
                <span class="bg-primary-600 dark:bg-primary-400 absolute -bottom-1 left-0 h-0.5 w-full rounded-full" />
              )}
              {/* Hover indicator */}
              <span class="absolute -bottom-1 left-0 h-0.5 w-0 rounded-full bg-zinc-400 transition-all duration-200 group-hover:w-full dark:bg-zinc-500" />
            </a>
          );
        })
      }
      <ThemeToggle />
    </nav>

    <!-- Mobile Menu Button -->
    <button
      id="mobile-menu-button"
      class="flex items-center rounded-md p-2 transition-colors duration-200 hover:bg-zinc-100 dark:hover:bg-zinc-800 md:hidden"
      aria-label="Open navigation menu"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        fill="none"
        viewBox="0 0 24 24"
        stroke-width="1.5"
        stroke="currentColor"
        class="h-6 w-6 text-zinc-900 dark:text-zinc-100"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5"></path>
      </svg>
    </button>
  </div>
</header>

<!-- Mobile Menu Overlay -->
<div
  id="mobile-menu"
  class="pointer-events-none fixed inset-0 z-50 flex flex-col bg-white/95 opacity-0 backdrop-blur-md transition-all duration-300 ease-in-out dark:bg-zinc-900/95"
>
  <div class="flex items-center justify-between border-b border-zinc-100 p-4 dark:border-zinc-800">
    <Logo size="default" showText={true} />
    <button
      id="close-menu-button"
      class="rounded-md p-2 text-zinc-900 transition-colors duration-200 hover:bg-zinc-100 dark:text-zinc-100 dark:hover:bg-zinc-800"
      aria-label="Close navigation menu"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        fill="none"
        viewBox="0 0 24 24"
        stroke-width="1.5"
        stroke="currentColor"
        class="h-6 w-6"
      >
        <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12"></path>
      </svg>
    </button>
  </div>

  <nav class="flex flex-1 flex-col items-center justify-center space-y-6 text-center">
    {
      navItems.map((item, index) => {
        const isActive = currentPath === (item.href === '/' ? '' : item.href.slice(1));
        return (
          <a
            href={item.href}
            class={`font-space-grotesk mobile-nav-item translate-y-4 text-lg font-medium opacity-0 transition-all duration-500 ${
              isActive
                ? 'text-zinc-900 dark:text-zinc-100'
                : 'text-zinc-600 hover:text-zinc-900 dark:text-zinc-400 dark:hover:text-zinc-100'
            }`}
            style={`transition-delay: ${index * 0.05}s;`}
          >
            {item.text}
          </a>
        );
      })
    }
    <div
      class="mobile-nav-item translate-y-4 pt-4 opacity-0 transition-all duration-500"
      style="transition-delay: 0.3s;"
    >
      <ThemeToggle />
    </div>
  </nav>
</div>

<!-- Spacer to prevent content from hiding behind fixed header -->
<div class="h-20"></div>

<script>
  // Enhanced mobile menu toggle with animations
  document.addEventListener('DOMContentLoaded', () => {
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const closeMenuButton = document.getElementById('close-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');
    const navItems = document.querySelectorAll('.mobile-nav-item');

    // Open menu with animations
    mobileMenuButton?.addEventListener('click', () => {
      if (!mobileMenu) return;

      // Prevent body scrolling
      document.body.style.overflow = 'hidden';

      // Show menu with fade in
      mobileMenu.classList.remove('pointer-events-none');
      mobileMenu.classList.add('pointer-events-auto');

      // Animate opacity
      setTimeout(() => {
        mobileMenu.style.opacity = '1';

        // Animate each nav item with staggered delay
        navItems.forEach((item) => {
          setTimeout(() => {
            item.classList.remove('opacity-0', 'translate-y-4');
          }, 150);
        });
      }, 50);
    });

    // Close menu with animations
    const closeMenu = () => {
      if (!mobileMenu) return;

      // Fade out nav items first
      navItems.forEach((item) => {
        item.classList.add('opacity-0', 'translate-y-4');
      });

      // Then fade out the menu
      setTimeout(() => {
        mobileMenu.style.opacity = '0';

        // After animation completes, hide menu and restore scrolling
        setTimeout(() => {
          mobileMenu.classList.remove('pointer-events-auto');
          mobileMenu.classList.add('pointer-events-none');
          document.body.style.overflow = '';
        }, 300);
      }, 100);
    };

    // Close button event
    closeMenuButton?.addEventListener('click', closeMenu);

    // Close menu when clicking a link
    const mobileLinks = mobileMenu?.querySelectorAll('a');
    mobileLinks?.forEach((link) => {
      link.addEventListener('click', closeMenu);
    });

    // Close menu on escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && mobileMenu?.classList.contains('pointer-events-auto')) {
        closeMenu();
      }
    });

    // Enhanced header scroll effects
    const header = document.querySelector('header');
    let lastScrollY = window.scrollY;

    window.addEventListener('scroll', () => {
      if (!header) return;

      const currentScrollY = window.scrollY;

      // Add enhanced shadow and backdrop blur on scroll
      if (currentScrollY > 10) {
        header.classList.add('shadow-lg', 'shadow-zinc-200/50', 'dark:shadow-zinc-800/50');
        header.style.backdropFilter = 'blur(12px)';
      } else {
        header.classList.remove('shadow-lg', 'shadow-zinc-200/50', 'dark:shadow-zinc-800/50');
        header.style.backdropFilter = 'blur(4px)';
      }

      // Hide/show header on scroll (optional)
      if (currentScrollY > lastScrollY && currentScrollY > 100) {
        header.style.transform = 'translateY(-100%)';
      } else {
        header.style.transform = 'translateY(0)';
      }

      lastScrollY = currentScrollY;
    });
  });
</script>

<style>
  /* Enhanced header styling */
  header {
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }

  /* Mobile navigation animations */
  .mobile-nav-item {
    transition:
      opacity 0.5s ease,
      transform 0.5s ease,
      color 0.3s ease;
  }

  /* Navigation link hover effects */
  nav a {
    position: relative;
    overflow: hidden;
  }

  /* Mobile menu button hover effect */
  #mobile-menu-button {
    transition: all 0.2s ease;
  }

  #mobile-menu-button:hover {
    transform: scale(1.05);
  }

  /* Enhanced mobile menu backdrop */
  #mobile-menu {
    backdrop-filter: blur(8px);
    transition:
      opacity 0.3s ease,
      backdrop-filter 0.3s ease;
  }

  /* Logo animation on page load */
  @keyframes logoFadeIn {
    from {
      opacity: 0;
      transform: translateY(-10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Apply logo animation */
  header a[href='/'] {
    animation: logoFadeIn 0.6s ease forwards;
  }
</style>
