---
import { getCollection } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import readingTime from 'reading-time';

export async function getStaticPaths() {
  const blogEntries = await getCollection('blog');

  // Filter out draft posts for production
  const publishedEntries = blogEntries.filter((entry) => !entry.data.draft);

  // Sort entries by date for better next/prev navigation
  const sortedEntries = [...publishedEntries].sort(
    (a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
  );

  return sortedEntries.map((entry, index) => {
    // Calculate reading time from markdown content
    const readingTimeResult = readingTime(entry.body);

    // Format reading time into readable string
    let readingTimeStr;
    if (readingTimeResult.minutes < 1) {
      readingTimeStr = 'Less than 1 min read';
    } else {
      // Round up and format as "X min read"
      const minutes = Math.ceil(readingTimeResult.minutes);
      readingTimeStr = `${minutes} min read`;
    }

    return {
      params: { slug: entry.slug },
      props: {
        entry,
        readingTimeValue: readingTimeStr,
        readingTimeStats: readingTimeResult,
        nextPost: index > 0 ? sortedEntries[index - 1] : null,
        prevPost: index < sortedEntries.length - 1 ? sortedEntries[index + 1] : null,
      },
    };
  });
}

const { entry, nextPost, prevPost, readingTimeValue, readingTimeStats } = Astro.props;
const { Content } = await entry.render();

// Override readingTime from frontmatter if available, otherwise use calculated value
const finalReadingTime = entry.data.readingTime || readingTimeValue;
---

<Layout
  title={entry.data.title}
  description={entry.data.description}
  heroImage={entry.data.heroImage}
  author={entry.data.author}
  pubDate={entry.data.pubDate}
  tags={entry.data.tags}
>
  <article class="mx-auto max-w-4xl">
    <!-- Article Header -->
    <header class="mb-8 lg:mb-12">
      {
        entry.data.heroImage && (
          <div class="mb-8 aspect-video overflow-hidden rounded-2xl">
            <img
              src={entry.data.heroImage}
              alt={entry.data.title}
              class="h-full w-full object-cover"
              loading="eager"
            />
          </div>
        )
      }

      <div class="space-y-4">
        {
          entry.data.tags && entry.data.tags.length > 0 && (
            <div class="flex flex-wrap gap-2">
              {entry.data.tags.map((tag) => (
                <a
                  href={`/tags/${tag.toLowerCase().replace(/\s+/g, '-')}`}
                  class="rounded-full bg-zinc-100 px-3 py-1 text-sm text-zinc-700 transition-colors hover:bg-zinc-200 dark:bg-zinc-800 dark:text-zinc-300 dark:hover:bg-zinc-700"
                >
                  #{tag}
                </a>
              ))}
            </div>
          )
        }

        <h1
          class="text-3xl font-bold leading-tight text-zinc-900 dark:text-zinc-100 sm:text-4xl lg:text-5xl"
        >
          {entry.data.title}
        </h1>

        {
          entry.data.description && (
            <p class="text-lg leading-relaxed text-zinc-600 dark:text-zinc-400 sm:text-xl">
              {entry.data.description}
            </p>
          )
        }

        <div
          class="flex flex-wrap items-center gap-4 border-t border-zinc-200 pt-4 text-sm text-zinc-500 dark:border-zinc-800 dark:text-zinc-400"
        >
          <div class="flex items-center gap-2">
            <span>By</span>
            <span class="font-medium text-zinc-700 dark:text-zinc-300">{entry.data.author}</span>
          </div>

          <span class="h-1 w-1 rounded-full bg-zinc-400"></span>

          <time dateTime={entry.data.pubDate.toISOString()}>
            {
              entry.data.pubDate.toLocaleDateString('en-US', {
                year: 'numeric',
                month: 'long',
                day: 'numeric',
              })
            }
          </time>

          <span class="h-1 w-1 rounded-full bg-zinc-400"></span>

          <span>{finalReadingTime}</span>

          {
            entry.data.featured && (
              <>
                <span class="h-1 w-1 rounded-full bg-zinc-400" />
                <span class="rounded bg-blue-100 px-2 py-1 text-xs font-medium text-blue-800 dark:bg-blue-900 dark:text-blue-200">
                  Featured
                </span>
              </>
            )
          }
        </div>
      </div>
    </header>

    <!-- Main Content -->
    <div
      class="prose prose-lg prose-zinc max-w-none dark:prose-invert prose-headings:scroll-mt-24 prose-headings:font-semibold prose-a:font-medium prose-a:text-zinc-800 prose-a:underline-offset-4 hover:prose-a:text-zinc-600 prose-img:rounded-xl dark:prose-a:text-zinc-300 dark:hover:prose-a:text-zinc-100"
    >
      <Content />
    </div>

    <!-- Article Footer -->
    <footer class="mt-12 border-t border-zinc-200 pt-8 dark:border-zinc-800 lg:mt-16">
      {
        entry.data.tags && entry.data.tags.length > 0 && (
          <div class="mb-8">
            <h3 class="mb-3 text-sm font-medium text-zinc-700 dark:text-zinc-300">Tagged with:</h3>
            <div class="flex flex-wrap gap-2">
              {entry.data.tags.map((tag) => (
                <a
                  href={`/tags/${tag.toLowerCase().replace(/\s+/g, '-')}`}
                  class="rounded-full bg-zinc-100 px-3 py-1 text-sm text-zinc-600 transition-colors hover:bg-zinc-200 dark:bg-zinc-800 dark:text-zinc-400 dark:hover:bg-zinc-700"
                >
                  #{tag}
                </a>
              ))}
            </div>
          </div>
        )
      }

      <!-- Social Share Buttons -->
      <div class="mb-8">
        <h3 class="mb-3 text-sm font-medium text-zinc-700 dark:text-zinc-300">
          Share this article:
        </h3>
        <div class="flex gap-3">
          <a
            href={`https://twitter.com/intent/tweet?text=${encodeURIComponent(entry.data.title)}&url=${encodeURIComponent(Astro.url.href)}`}
            target="_blank"
            rel="noopener noreferrer"
            class="flex items-center gap-2 rounded-lg bg-blue-500 px-4 py-2 text-sm text-white transition-colors hover:bg-blue-600"
          >
            <svg class="h-4 w-4" fill="currentColor" viewBox="0 0 24 24">
              <path
                d="M23.953 4.57a10 10 0 01-2.825.775 4.958 4.958 0 002.163-2.723c-.951.555-2.005.959-3.127 1.184a4.92 4.92 0 00-8.384 4.482C7.69 8.095 4.067 6.13 1.64 3.162a4.822 4.822 0 00-.666 2.475c0 1.71.87 3.213 2.188 4.096a4.904 4.904 0 01-2.228-.616v.06a4.923 4.923 0 003.946 4.827 4.996 4.996 0 01-2.212.085 4.936 4.936 0 004.604 3.417 9.867 9.867 0 01-6.102 2.105c-.39 0-.779-.023-1.17-.067a13.995 13.995 0 007.557 2.209c9.053 0 13.998-7.496 13.998-13.985 0-.21 0-.42-.015-.63A9.935 9.935 0 0024 4.59z"
              ></path>
            </svg>
            Twitter
          </a>

          <a
            href={`https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(Astro.url.href)}`}
            target="_blank"
            rel="noopener noreferrer"
            class="flex items-center gap-2 rounded-lg bg-blue-700 px-4 py-2 text-sm text-white transition-colors hover:bg-blue-800"
          >
            <svg class="h-4 w-4" fill="currentColor" viewBox="0 0 24 24">
              <path
                d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"
              ></path>
            </svg>
            LinkedIn
          </a>
        </div>
      </div>
    </footer>

    <!-- Next/Previous Navigation -->
    <nav
      class="mt-12 grid grid-cols-1 gap-4 border-t border-zinc-200 pt-8 dark:border-zinc-800 md:grid-cols-2 lg:mt-16 lg:gap-6 lg:pt-12"
    >
      {
        prevPost && (
          <a
            href={`/blog/${prevPost.slug}`}
            class="group relative flex h-full flex-col overflow-hidden rounded-xl border border-zinc-200 p-4 transition-all duration-300 hover:-translate-y-1 hover:bg-zinc-50 dark:border-zinc-800 dark:hover:bg-zinc-800/50 lg:p-6"
          >
            <div class="absolute inset-0 bg-gradient-to-r from-zinc-100 to-transparent opacity-0 transition-opacity duration-300 group-hover:opacity-100 dark:from-zinc-800 dark:to-transparent" />
            <span class="relative z-10 mb-1 flex items-center gap-1 text-xs font-medium text-zinc-500 dark:text-zinc-400 lg:mb-2 lg:gap-2 lg:text-sm">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="20"
                height="20"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
                class="h-3 w-3 transition-transform duration-300 group-hover:-translate-x-1 lg:h-4 lg:w-4"
              >
                <path d="m15 18-6-6 6-6" />
              </svg>
              Previous Article
            </span>
            <h3 class="relative z-10 line-clamp-2 text-base font-medium text-zinc-900 transition-colors group-hover:text-zinc-700 dark:text-white dark:group-hover:text-zinc-300 lg:text-lg">
              {prevPost.data.title}
            </h3>
          </a>
        )
      }

      {
        nextPost && (
          <a
            href={`/blog/${nextPost.slug}`}
            class="group relative flex h-full flex-col overflow-hidden rounded-xl border border-zinc-200 p-4 transition-all duration-300 hover:-translate-y-1 hover:bg-zinc-50 dark:border-zinc-800 dark:hover:bg-zinc-800/50 md:text-right lg:p-6"
          >
            <div class="absolute inset-0 bg-gradient-to-l from-zinc-100 to-transparent opacity-0 transition-opacity duration-300 group-hover:opacity-100 dark:from-zinc-800 dark:to-transparent" />
            <span class="relative z-10 mb-1 flex items-center gap-1 text-xs font-medium text-zinc-500 dark:text-zinc-400 md:justify-end lg:mb-2 lg:gap-2 lg:text-sm">
              Next Article
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="20"
                height="20"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
                class="h-3 w-3 transition-transform duration-300 group-hover:translate-x-1 lg:h-4 lg:w-4"
              >
                <path d="m9 18 6-6-6-6" />
              </svg>
            </span>
            <h3 class="relative z-10 line-clamp-2 text-base font-medium text-zinc-900 transition-colors group-hover:text-zinc-700 dark:text-white dark:group-hover:text-zinc-300 lg:text-lg">
              {nextPost.data.title}
            </h3>
          </a>
        )
      }
    </nav>

    <!-- Back to Blog -->
    <div class="mt-8 text-center lg:mt-12">
      <a
        href="/blog"
        class="inline-flex items-center gap-2 rounded-lg bg-zinc-100 px-6 py-3 font-medium text-zinc-700 transition-colors hover:bg-zinc-200 dark:bg-zinc-800 dark:text-zinc-300 dark:hover:bg-zinc-700"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="20"
          height="20"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
          class="h-4 w-4"
        >
          <path d="m15 18-6-6 6-6"></path>
        </svg>
        Back to All Posts
      </a>
    </div>
  </article>
</Layout>

<script>
  // Add copy buttons to code blocks
  function initializeCodeCopyButtons() {
    const codeBlocks = document.querySelectorAll('pre');

    codeBlocks.forEach((block) => {
      // Skip if already processed
      if (block.classList.contains('code-block-processed')) {
        return;
      }

      block.classList.add('code-block-processed');

      // Create wrapper if not already wrapped
      let wrapper;
      if (
        block.parentNode.classList.contains('relative') &&
        block.parentNode.classList.contains('group')
      ) {
        wrapper = block.parentNode;
      } else {
        wrapper = document.createElement('div');
        wrapper.className = 'relative group';
        block.parentNode.insertBefore(wrapper, block);
        wrapper.appendChild(block);
      }

      // Add copy button if not already present
      if (!wrapper.querySelector('.copy-button')) {
        const copyButton = document.createElement('button');
        copyButton.className =
          'copy-button absolute top-2 right-2 p-1.5 rounded-md bg-zinc-700/50 hover:bg-zinc-700 text-zinc-200 opacity-0 group-hover:opacity-100 transition-opacity duration-200';
        copyButton.innerHTML = `
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4">
            <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 17.25v3.375c0 .621-.504 1.125-1.125 1.125h-9.75a1.125 1.125 0 01-1.125-1.125V7.875c0-.621.504-1.125 1.125-1.125H6.75a9.06 9.06 0 011.5.124m7.5 10.376h3.375c.621 0 1.125-.504 1.125-1.125V11.25c0-4.46-3.243-8.161-7.5-8.876a9.06 9.06 0 00-1.5-.124H9.375c-.621 0-1.125.504-1.125 1.125v3.5m7.5 10.375H9.375a1.125 1.125 0 01-1.125-1.125v-9.25m12 6.625v-1.875a3.375 3.375 0 00-3.375-3.375h-1.5a1.125 1.125 0 01-1.125-1.125v-1.5a3.375 3.375 0 00-3.375-3.375H9.75" />
          </svg>
        `;

        copyButton.addEventListener('click', async () => {
          const code = block.querySelector('code').innerText;

          try {
            await navigator.clipboard.writeText(code);

            // Show copied feedback
            copyButton.innerHTML = `
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4">
                <path stroke-linecap="round" stroke-linejoin="round" d="M4.5 12.75l6 6 9-13.5" />
              </svg>
            `;

            setTimeout(() => {
              copyButton.innerHTML = `
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4">
                  <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 17.25v3.375c0 .621-.504 1.125-1.125 1.125h-9.75a1.125 1.125 0 01-1.125-1.125V7.875c0-.621.504-1.125 1.125-1.125H6.75a9.06 9.06 0 011.5.124m7.5 10.376h3.375c.621 0 1.125-.504 1.125-1.125V11.25c0-4.46-3.243-8.161-7.5-8.876a9.06 9.06 0 00-1.5-.124H9.375c-.621 0-1.125.504-1.125 1.125v3.5m7.5 10.375H9.375a1.125 1.125 0 01-1.125-1.125v-9.25m12 6.625v-1.875a3.375 3.375 0 00-3.375-3.375h-1.5a1.125 1.125 0 01-1.125-1.125v-1.5a3.375 3.375 0 00-3.375-3.375H9.75" />
                </svg>
              `;
            }, 2000);
          } catch (err) {
            console.error('Failed to copy code: ', err);
          }
        });

        wrapper.appendChild(copyButton);
      }
    });
  }

  // Main initialization function
  function initializeBlogPost() {
    initializeCodeCopyButtons();

    // Scroll to hash if present in URL
    if (window.location.hash) {
      setTimeout(() => {
        const element = document.querySelector(window.location.hash);
        if (element) {
          element.scrollIntoView({ behavior: 'smooth', block: 'start' });
        }
      }, 100);
    }
  }

  // Initialize on first load
  document.addEventListener('DOMContentLoaded', initializeBlogPost);

  // Re-initialize when content changes
  document.addEventListener('astro:page-load', initializeBlogPost);
  document.addEventListener('spa-content-loaded', initializeBlogPost);
</script>

<style>
  /* Enhanced typography for blog content */
  .prose {
    @apply text-zinc-800 dark:text-zinc-200;
  }

  .prose h1,
  .prose h2,
  .prose h3,
  .prose h4 {
    @apply font-semibold text-zinc-900 dark:text-zinc-100;
  }

  .prose h2 {
    @apply mb-3 mt-8 border-b border-zinc-200 pb-2 text-xl dark:border-zinc-800 lg:mb-4 lg:mt-12 lg:text-2xl;
  }

  .prose h3 {
    @apply mb-2 mt-6 text-lg lg:mb-3 lg:mt-8 lg:text-xl;
  }

  .prose p {
    @apply mb-4 leading-relaxed lg:mb-6;
  }

  .prose a {
    @apply font-medium text-zinc-800 underline decoration-zinc-400 underline-offset-2 transition-colors hover:text-zinc-600 hover:decoration-zinc-600 dark:text-zinc-300 dark:decoration-zinc-600 dark:hover:text-zinc-100 dark:hover:decoration-zinc-400;
  }

  .prose blockquote {
    @apply my-4 border-l-4 border-zinc-300 pl-4 italic text-zinc-700 dark:border-zinc-700 dark:text-zinc-300 lg:my-6;
  }

  .prose code {
    @apply rounded bg-zinc-100 px-1.5 py-0.5 text-sm font-medium text-zinc-800 dark:bg-zinc-800 dark:text-zinc-200;
  }

  .prose pre {
    @apply my-4 overflow-x-auto rounded-lg bg-[#1e293b] p-3 text-sm text-zinc-200 shadow-md lg:my-6 lg:p-4 !important;
  }

  .prose pre code {
    @apply bg-transparent p-0 text-zinc-200 !important;
  }

  .prose img {
    @apply mx-auto my-6 h-auto max-w-full rounded-lg shadow-md lg:my-8;
  }

  .prose ul,
  .prose ol {
    @apply my-4 pl-5 lg:my-6 lg:pl-6;
  }

  .prose li {
    @apply mb-1 lg:mb-2;
  }

  .prose hr {
    @apply my-8 border-zinc-200 dark:border-zinc-800 lg:my-10;
  }

  /* Line clamp utility */
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>
